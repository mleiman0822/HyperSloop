// <auto-generated />
using System;
using HyperSloopApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HyperSloopApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("HyperSloopApp.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("HyperSloopApp.Models.ScanEvent", b =>
                {
                    b.Property<int>("ScanEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("SlideId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScanEventId");

                    b.HasIndex("SlideId");

                    b.HasIndex("UserId");

                    b.ToTable("ScanEvents");
                });

            modelBuilder.Entity("HyperSloopApp.Models.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("PercentageOfSlide")
                        .HasColumnType("double");

                    b.Property<int>("SlideId")
                        .HasColumnType("int");

                    b.HasKey("SensorId");

                    b.HasIndex("SlideId");

                    b.ToTable("Senors");
                });

            modelBuilder.Entity("HyperSloopApp.Models.SensorEvent", b =>
                {
                    b.Property<int>("SensorEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SensorEventId");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorEvents");
                });

            modelBuilder.Entity("HyperSloopApp.Models.Slide", b =>
                {
                    b.Property<int>("SlideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EndingFloor")
                        .HasColumnType("int");

                    b.Property<double>("HeightInFeet")
                        .HasColumnType("double");

                    b.Property<string>("HexColor")
                        .HasColumnType("longtext");

                    b.Property<double>("LengthInFeet")
                        .HasColumnType("double");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("StartingFloor")
                        .HasColumnType("int");

                    b.HasKey("SlideId");

                    b.HasIndex("LocationId");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("HyperSloopApp.Models.SlideEvent", b =>
                {
                    b.Property<int>("SlideEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EndingSensorEventId")
                        .HasColumnType("int");

                    b.Property<int>("ScanEventId")
                        .HasColumnType("int");

                    b.Property<int>("SlideId")
                        .HasColumnType("int");

                    b.Property<int>("StartingSensorEventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SlideEventId");

                    b.HasIndex("EndingSensorEventId");

                    b.HasIndex("ScanEventId");

                    b.HasIndex("SlideId");

                    b.HasIndex("StartingSensorEventId");

                    b.HasIndex("UserId");

                    b.ToTable("SlideEvents");
                });

            modelBuilder.Entity("HyperSloopApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HyperSloopApp.Models.ScanEvent", b =>
                {
                    b.HasOne("HyperSloopApp.Models.Slide", "Slide")
                        .WithMany()
                        .HasForeignKey("SlideId");

                    b.HasOne("HyperSloopApp.Models.User", "User")
                        .WithMany("ScanEvents")
                        .HasForeignKey("UserId");

                    b.Navigation("Slide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HyperSloopApp.Models.Sensor", b =>
                {
                    b.HasOne("HyperSloopApp.Models.Slide", "Slide")
                        .WithMany("Sensors")
                        .HasForeignKey("SlideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slide");
                });

            modelBuilder.Entity("HyperSloopApp.Models.SensorEvent", b =>
                {
                    b.HasOne("HyperSloopApp.Models.Sensor", "Sensor")
                        .WithMany("SensorEvents")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("HyperSloopApp.Models.Slide", b =>
                {
                    b.HasOne("HyperSloopApp.Models.Location", "Location")
                        .WithMany("Slides")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("HyperSloopApp.Models.SlideEvent", b =>
                {
                    b.HasOne("HyperSloopApp.Models.SensorEvent", "EndingSensorEvent")
                        .WithMany()
                        .HasForeignKey("EndingSensorEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperSloopApp.Models.ScanEvent", "ScanEvent")
                        .WithMany()
                        .HasForeignKey("ScanEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperSloopApp.Models.Slide", "Slide")
                        .WithMany("SlideEvents")
                        .HasForeignKey("SlideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperSloopApp.Models.SensorEvent", "StartingSensorEvent")
                        .WithMany()
                        .HasForeignKey("StartingSensorEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperSloopApp.Models.User", "User")
                        .WithMany("SlideEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndingSensorEvent");

                    b.Navigation("ScanEvent");

                    b.Navigation("Slide");

                    b.Navigation("StartingSensorEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HyperSloopApp.Models.Location", b =>
                {
                    b.Navigation("Slides");
                });

            modelBuilder.Entity("HyperSloopApp.Models.Sensor", b =>
                {
                    b.Navigation("SensorEvents");
                });

            modelBuilder.Entity("HyperSloopApp.Models.Slide", b =>
                {
                    b.Navigation("Sensors");

                    b.Navigation("SlideEvents");
                });

            modelBuilder.Entity("HyperSloopApp.Models.User", b =>
                {
                    b.Navigation("ScanEvents");

                    b.Navigation("SlideEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
