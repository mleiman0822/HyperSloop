@page "/comparedStats/{comparedUser}"
@using Radzen
@using Radzen.Blazor
@using Blazorise
@using Blazorise.Components
@using System.Net
@using System.Net.Sockets
@using System.Linq.Expressions
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@using Microsoft.AspNetCore.Http
@using System.Globalization;
@using System.ComponentModel

@inject HyperSloopService hyperSloopService
@inject IHttpContextAccessor httpContextAccessor
@inject AppService appservice
@inject NavigationManager navigationManager


<h3 class="text-center">Compare stats with <b>@comparedUser</b></h3>
@if (isLoaded == false)
{
    <h4 class="text-center">Select Date:</h4>
    <RadzenDatePicker Style="width:100%" @bind-Value=@Value DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) />
}
else
{
    <h4>Selected Date: @Value</h4>
    <br />
    <h4 class="text-center">Select Slide:</h4>
    <RadzenDropDown TValue="int" Style="width:100%"
                    Placeholder="Filter by slide..."
                    Data="@EventsListComparedUser.Select(x => x.SlideId).Distinct()"
                    Change=@(args => OnSlideSelection(args)) />
    if (SelectedSlideId != null)
    {
        <Button Clicked="CompareStats" Color="Color.Danger">Compare</Button>
    }
}

<h4 class="text-center">Change Date:</h4>
<RadzenDatePicker @bind-Value=@Value DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) />
<RadzenDataGrid TItem="SlideEvent" Data="@SortedDataBtDateAndSlideCompareduser"
                AllowColumnResize="true" AllowFiltering="true"
                FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                PageSize="5" AllowSorting="true" AllowPaging="true"
                Style="width:100%">
    <Columns>
        <RadzenDataGridColumn TItem="SlideEvent" Property="SlideId" Title="Slide" Width="75px" />
        <RadzenDataGridColumn SortOrder="SortOrder.Descending" TItem="SlideEvent" FormatString="{0:d}" Property="StartTime.Date" Title="Date" Width="75px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="StartTime" Title="Start Time" Width="100px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="EndTime" Title="End Time" Width="100px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} Sec." Property="SlideDuration" Title="Duration" Width="100px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="AverageSpeed" Title="Avg. Speed" Width="85px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="VerticalSpeed" Title="Vert. Speed" Width="85px" />
    </Columns>
</RadzenDataGrid>
<RadzenDatePicker @bind-Value=@Value DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) />
<RadzenDataGrid TItem="SlideEvent" Data="@SortedDataBtDateAndSlideCurrentUser"
                AllowColumnResize="true" AllowFiltering="true"
                FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                PageSize="5" AllowSorting="true" AllowPaging="true"
                Style="width:100%">
    <Columns>
        <RadzenDataGridColumn TItem="SlideEvent" Property="SlideId" Title="Slide" Width="75px" />
        <RadzenDataGridColumn SortOrder="SortOrder.Descending" TItem="SlideEvent" FormatString="{0:d}" Property="StartTime.Date" Title="Date" Width="75px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="StartTime" Title="Start Time" Width="100px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="EndTime" Title="End Time" Width="100px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} Sec." Property="SlideDuration" Title="Duration" Width="100px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="AverageSpeed" Title="Avg. Speed" Width="85px" />
        <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="VerticalSpeed" Title="Vert. Speed" Width="85px" />
    </Columns>
</RadzenDataGrid>



@code {
    [Parameter] public string comparedUser { get; set; }
    public string Email { get; set; }
    private Modal modalRef;
    public bool isLoaded;
    public int SelectedSlideId;
    DateTime? Value = DateTime.Now;
    IEnumerable<SlideEvent> EventsList;
    IEnumerable<SlideEvent> RangedEventList;
    IEnumerable<SlideEvent> SortedDataBtDateAndSlideCurrentUser;
    IEnumerable<SlideEvent> SortedDataBtDateAndSlideCompareduser;
    IEnumerable<SlideEvent> EventsListCurrentUser;
    IEnumerable<SlideEvent> EventsListComparedUser;

    protected override async Task OnInitializedAsync()
    {
        isLoaded = false;
        Email = httpContextAccessor.HttpContext.User.Identity.Name.ToString();
        EventsList = hyperSloopService.GetUserSlideEvents().ToList();
        EventsListCurrentUser = await appservice._HyperSloopService.GetSlideEventsDataByUserId(Email);
        EventsListComparedUser = await appservice._HyperSloopService.GetComparedUserEventsByName(comparedUser);
        Email = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Email.ToLower()).ToString().Replace("@Bngholdingsinc.Com", "").Replace(".", " ");
    }

    void OnChange(DateTime? value, string name, string format)
    {
        isLoaded = true;
        Value = value;

    }
    void OnSlideSelection(object slide)
    {
        SelectedSlideId = Convert.ToInt32(slide);
    }

    void CompareStats()
    {
        SortedDataBtDateAndSlideCompareduser = EventsListComparedUser.Where(x => x.StartTime.Date == Value && x.SlideId == SelectedSlideId).ToList();
        SortedDataBtDateAndSlideCurrentUser = EventsListCurrentUser.Where(x => x.StartTime.Date == Value && x.SlideId == SelectedSlideId).ToList();
    }

}
