@page "/"
@using Radzen.Blazor
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@using HyperSloopApp.Services
@using System.Threading
@using System.Net.Sockets
@using System.Net
@using Microsoft.AspNetCore.Http
@using System.Globalization;
@using Blazorise;
@using System;
@using Microsoft.Extensions.Logging;

@using System.Text
@inject IJSRuntime JsRuntime
@inject DialogService dialogService
@inject AppService appservice
@inject ApplicationDbContext appDbcontext
@inject HyperSloopService hyperSloopService
@inject UDPService udpService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager
@inject IJSRuntime _jsRuntime



    <h3 class="text-center">Rider: <b>@Name</b></h3>
    <br />
    <h3 class="text-center">Select Slide:</h3>
    @foreach(var slide in Slides)
                {      
<div class="text-center">
    <button @onclick="@(() => StartHyperSloop(slide.SlideId))" class="slideButton" style="background-color:@slide.HexColor; color:white; text-align:center"
            value="@slide.SlideId">
        @slide.SlideId.ToString().Replace("1", "Blue").Replace("2", "Green").Replace("3", "Orange")
    </button>
</div>
                

}

<Modal @ref="modalRef" Closed="@CancelTimer">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle Class="text-center">HyperSloop Engaged</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <h3 class="text-center">Slide @SelectedSlide.ToString().Replace("1", "Blue").Replace("2", "Green").Replace("3", "Orange")</h3>
            <br/>
            <h1 class="text-center">@counter.ToString().Replace("6", "Ready?").Replace("1", "Go!")</h1>
        </ModalBody>
        <ModalFooter>
                <Button Color="Color.Danger" Clicked="@CancelTimer">Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<audio id="beep" src="./5 second countdown with sound effect.wav"></audio>



@code{
    private Modal modalRef;
    private static System.Timers.Timer timer;
    private int counter = 6;
    public string RecievedMessage { get; set; }
    public string Email { get; set; }
    public string Name { get; set; }
    public int SelectedSlide { get; set; }
    IEnumerable<Slide> Slides;

    protected async override void OnInitialized()
    {
        WaitForSeconds();
        Email = httpContextAccessor.HttpContext.User.Identity.Name.ToString();
        Slides = hyperSloopService.GetSlides();
        Name = httpContextAccessor.HttpContext.User.Identity.Name.ToString();
        Name = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Email.ToLower()).ToString().Replace("@Bngholdingsinc.Com", "").Replace(".", " ");
    }

    public async Task WaitForSeconds()
    {
        RecievedMessage = await udpService.GetNext();
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
        WaitForSeconds();
    }


    void StartHyperSloop(int slideid)
    {
        SelectedSlide = slideid;
        PlaySound();
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += CountDownTimer;
        timer.Enabled = true;
        modalRef.Show();
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if(counter > 0)
        {
            counter -= 1;
        }
        else
        {
            timer.Enabled = false;
        }
        InvokeAsync(StateHasChanged);
        if(counter == 0)
        {
            hyperSloopService.UserEventInsert(SelectedSlide, Email);
            timer.Elapsed -= CountDownTimer;
            navigationManager.NavigateTo("/personalStats", true);
        }
    }
    public void CancelTimer()
    {
        timer.Enabled = false;
        navigationManager.NavigateTo("/", true);
    }
    void CancelSlideSelection()
    {
        navigationManager.NavigateTo("/", true);

    }

    public async Task PlaySound()
    {
        await _jsRuntime.InvokeAsync<string>("PlayAudio", "beep");
    }

}



