@page "/charts"
@using System.Globalization
@using System
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@inject HyperSloopService hyperSloopService



<h3 class="text-center">HyperSloop Charts for @DateTime.Now.ToString("MMMM"), @DateTime.Now.ToString("yyyy")</h3>
<br/>
<Tabs Justified="true" SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="TotalSlideCount"><RadzenIcon Icon="directions_run" /></Tab>
        <Tab Name="AverageSpeed"><RadzenIcon Icon="speed" /></Tab>
        <Tab Name="AverageVerticalSpeed"><RadzenIcon Icon="swap_vert" /></Tab>
    </Items>
    <Content>
        <TabPanel Name="TotalSlideCount">
            <div class="row w-100" style="padding-top:7%">
                <h3 class="text-center">Total Slide Runs</h3>
                <RadzenChart>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                    <RadzenLineSeries Smooth="@smooth" Data="@Slide1" CategoryProperty="Date" Title="Blue" LineType="LineType.Dashed" ValueProperty="Value">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@smooth" Data="@Slide2" CategoryProperty="Date" Title="Green" LineType="LineType.Solid" ValueProperty="Value">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@smooth" Data="@Slide3" CategoryProperty="Date" Title="Orange" LineType="LineType.Dotted" ValueProperty="Value">
                        <RadzenMarkers MarkerType="MarkerType.Triangle" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="30" FormatString="{0:MM/dd}"  />
                    <RadzenValueAxis Step="20">
                        <RadzenGridLines Visible="true" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </TabPanel>
        <TabPanel Name="AverageSpeed">
            <div class="row">
                <div class="col-md-6 col-sm-12 p-4">
                    <h3 class="text-center">Average Slide Duraction (Seconds)</h3>
                    <RadzenChart>
                        <RadzenAreaSeries Smooth="@smooth" Data="@Slide1Average" CategoryProperty="Date" Title="Blue" ValueProperty="Average">
                        </RadzenAreaSeries>
                        <RadzenAreaSeries Smooth="@smooth" Data="@Slide2Average" CategoryProperty="Date" Title="Green" LineType="LineType.Dashed" ValueProperty="Average">
                        </RadzenAreaSeries>
                        <RadzenAreaSeries Smooth="@smooth" Data="@Slide3Average" CategoryProperty="Date" Title="Orange" LineType="LineType.Dotted" ValueProperty="Average">
                        </RadzenAreaSeries>
                        <RadzenCategoryAxis Padding="20" FormatString="{0:MM/dd}" />
                        <RadzenValueAxis FormatString="{0:0.00}">
                            <RadzenGridLines Visible="true" />
                        </RadzenValueAxis>
                        <RadzenLegend Position="LegendPosition.Bottom" />
                    </RadzenChart>
                </div>
            </div>
        </TabPanel>
        <TabPanel Name="AverageVerticalSpeed">
            <div class="row">
                <div class="col-md-6 col-sm-12 p-4">
                    <h3 class="text-center">Average Vertical Speed (Seconds)</h3>
                    <RadzenChart>
                        <RadzenAreaSeries Smooth="@smooth" Data="@Slide1VerticalAverage" CategoryProperty="Date" Title="Blue" ValueProperty="Average">
                        </RadzenAreaSeries>
                        <RadzenAreaSeries Smooth="@smooth" Data="@Slide2VerticalAverage" CategoryProperty="Date" Title="Green" LineType="LineType.Dashed" ValueProperty="Average">
                        </RadzenAreaSeries>
                        <RadzenAreaSeries Smooth="@smooth" Data="@Slide3VerticalAverage" CategoryProperty="Date" Title="Orange" LineType="LineType.Dotted" ValueProperty="Average">
                        </RadzenAreaSeries>
                        <RadzenCategoryAxis Padding="20" />
                        <RadzenValueAxis FormatString="{0:0.00}">
                            <RadzenGridLines Visible="true" />
                        </RadzenValueAxis>
                        <RadzenLegend Position="LegendPosition.Bottom" />

                    </RadzenChart>
                </div>
            </div>
        </TabPanel>
    </Content>
</Tabs>


@code{
    public double AverageTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Average(x => x.SlideDuration);
        }
    }
    IEnumerable<SlideEvent> EventsList;
    IEnumerable<SlideEvent> RangedEventList;
    IEnumerable<DataItemSlideCount> Slide1;
    IEnumerable<DataItemSlideCount> Slide2;
    IEnumerable<DataItemSlideCount> Slide3;
    IEnumerable<DataItemVerticalAverage> Slide1VerticalAverage;
    IEnumerable<DataItemVerticalAverage> Slide2VerticalAverage;
    IEnumerable<DataItemVerticalAverage> Slide3VerticalAverage;
    IEnumerable<DataItemAverage> Slide1Average;
    IEnumerable<DataItemAverage> Slide2Average;
    IEnumerable<DataItemAverage> Slide3Average;
    string selectedTab = "TotalSlideCount";
    bool smooth = true;
    public DateTime StartRange { get; set; } = DateTime.Now.Date;
    public DateTime EndRange { get; set; } = DateTime.Now.AddDays(1).Date;
    public DateRange Range { get; set; } = DateRange.Today;
    public static IEnumerable<DateRange> DateRanges { get; set; } = Enum.GetValues(typeof(DateRange)).Cast<DateRange>();

    protected override async Task OnInitializedAsync()
    {
        Range = DateRange.Month;
        SetRange(Range);
    }

    public async Task SetRange(DateRange range)
    {
        if (range == DateRange.Today)
        {
            StartRange = DateTime.Now.Date;
            EndRange = DateTime.Now.AddDays(1).Date;
        }
        else if (range == DateRange.Week)
        {
            StartRange = DateTime.Today.AddDays(
            (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
            (int)DateTime.Today.DayOfWeek);
            EndRange = DateTime.Now.AddDays(8).Date;
        }
        else if (range == DateRange.Month)
        {
            StartRange = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            EndRange = StartRange.AddMonths(1).AddDays(-1);
        }

        else if (range == DateRange.Year)
        {
            StartRange = new DateTime(DateTime.Now.Year, 1, 1);
            EndRange = StartRange.AddYears(1).AddDays(-1);
        }
        else if (range == DateRange.All_Time)
        {
            StartRange = DateTime.Now.AddYears(-10);
            EndRange = DateTime.Now.AddDays(1).Date;
        }

        Range = range;
        EventsList = hyperSloopService.GetUserSlideEvents().ToList();
        RangedEventList = EventsList.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).ToList();
        Slide1 = RangedEventList.Where(x => x.SlideId == 1).GroupBy(x => x.StartTime.Date).Select(x => new DataItemSlideCount(x.Key, x.Count())).ToList();
        Slide2 = RangedEventList.Where(x => x.SlideId == 2).GroupBy(x => x.StartTime.Date).Select(x => new DataItemSlideCount(x.Key, x.Count())).ToList();
        Slide3 = RangedEventList.Where(x => x.SlideId == 3).GroupBy(x => x.StartTime.Date).Select(x => new DataItemSlideCount(x.Key, x.Count())).ToList();
        Slide1Average = RangedEventList.Where(x => x.SlideId == 1).GroupBy(x => x.StartTime.Date).Select(x => new DataItemAverage(x.Key, x.Select(x => x.AverageSpeed).First()));
        Slide2Average = RangedEventList.Where(x => x.SlideId == 2).GroupBy(x => x.StartTime.Date).Select(x => new DataItemAverage(x.Key, x.Select(x => x.AverageSpeed).First()));
        Slide3Average = RangedEventList.Where(x => x.SlideId == 3).GroupBy(x => x.StartTime.Date).Select(x => new DataItemAverage(x.Key, x.Select(x => x.AverageSpeed).First()));
        Slide1VerticalAverage = RangedEventList.Where(x => x.SlideId == 1).GroupBy(x => x.StartTime.Date).Select(x => new DataItemVerticalAverage(x.Key, x.Select(x => x.VerticalSpeed).First()));
        Slide2VerticalAverage = RangedEventList.Where(x => x.SlideId == 2).GroupBy(x => x.StartTime.Date).Select(x => new DataItemVerticalAverage(x.Key, x.Select(x => x.VerticalSpeed).First()));
        Slide3VerticalAverage = RangedEventList.Where(x => x.SlideId == 3).GroupBy(x => x.StartTime.Date).Select(x => new DataItemVerticalAverage(x.Key, x.Select(x => x.VerticalSpeed).First()));


    }

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }

    public class DataItemSlideCount
    {
        public DataItemSlideCount(DateTime date, double value) { Date = date; Value = value;  }
        public DateTime Date { get; set; }
        public double Value { get; set; }

    }

    public class DataItemAverage
    {
        public DataItemAverage(DateTime date, double? average) { Date = date; Average = average; }
        public DateTime Date { get; set; }
        public double? Average { get; set; }
    }

    public class DataItemVerticalAverage
    {
        public DataItemVerticalAverage(DateTime date, double? average) { Date = date; Average = average; }
        public DateTime Date { get; set; }
        public double? Average { get; set; }
    }

    public enum DateRange
    {
        Today,
        Week,
        Month,
        Year,
        All_Time
    }

}