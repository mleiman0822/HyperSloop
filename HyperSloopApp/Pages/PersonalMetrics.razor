@page "/personalStats"
@using Radzen
@using Radzen.Blazor
@using Blazorise
@using Blazorise.Components
@using System.Net
@using System.Net.Sockets
@using System.Linq.Expressions
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@using Microsoft.AspNetCore.Http
@using System.Globalization;
@using System.ComponentModel

@inject HyperSloopService hyperSloopService
@inject IHttpContextAccessor httpContextAccessor
@inject AppService appservice
@inject NavigationManager navigationManager


<h3></h3>

@if (EventsList == null)
{
    <p class="text-center"><em>Loading Leaderboard data</em></p>
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <h3 class="text-center">Personal Stats for <b>@Email</b></h3>
    <br />

    @foreach (var range in DateRanges)
    {

        <div class="float-start">
            <Button Active="true" Color="@(Range == range ? Color.Primary : Color.Dark)"
                    Clicked="@(args => SetRange(range))">
                @range.ToString().Replace("_", " ")
            </Button>
            <div class="divder" />
        </div>
    }
    <br />

    <Modal @ref="modalRef" Closed="@CloseModal">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Compare Stats</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                @if (ComparedUser == null)
                {
                    <RadzenDropDown TValue="string" Style="width: 100%;"
                                    Placeholder="Select HyperSloop User"
                                    AllowFiltering="true"
                                    Data="@EventsList.Select(x => x.User.Name).Distinct()"
                                    Change="@(args => OnCompareStatsChange(args))"
                                    Value="@ComparedUser" />
                }
                else
                {
                    <h3 class="text-center">Comparing stats with <b>@ComparedUser</b></h3>
                    <h4 class="text-center"></h4>
                    <br />
                    <div class="text-center">
                        <Button Style="justify-content:center; text-align:center" Color="Color.Danger" Clicked="@(args => CompareStats(ComparedUser))">Compare</Button>
                        <Button Color="Color.Secondary" Clicked="@CloseModal">Cancel</Button>

                    </div>
                }
            </ModalBody>
        </ModalContent>
    </Modal>
    <div class="float-start w-100">
        <Tabs Style="margin-top:5%" Justified="true" SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
            <Items>
                <Tab Name="Events">Events</Tab>
                <Tab Name="SlideMetrics">Metrics</Tab>
                <Tab Name="CompareStats" Clicked="@ShowCompareModal">
                    <RadzenIcon Style="vertical-align:inherit" Icon="compare_arrows" />
                </Tab>
            </Items>
            <Content>
                <TabPanel Name="Events">
                    <div style="clear:both; margin-right: 5px">
                        <div style="padding-bottom: 8px; padding-top: 8px">
                            @if (ResetFilter == true)
                            {
                                <Button Class="w-100" Clicked="@OnResetFilter" Color="Color.Warning">
                                    <Icon Name="IconName.Clear"></Icon>
                                    Clear
                                </Button>
                                <figcaption class="text-center">Showing results for slide: @FilteredSlideName</figcaption>

                            }
                            else
                            {
                                <RadzenDropDown TValue="Slide" Style="width:100%"
                                                Placeholder="Filter by slide..."
                                                Data="@RangedEventListFiltered.Select(x => x.Slide).Distinct()"
                                                TextProperty="Name"
                                                Change=@(args => OnSlideFilterChange((args as Slide).Name)) />
                            }

                        </div>
                        <RadzenGrid TItem="SlideEvent" Data="@RangedEventListFiltered"
                                    AllowColumnResize="true" AllowFiltering="true"
                                    FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    PageSize="20" AllowSorting="true" AllowPaging="true"
                                    CellRender="@CellRender">
                            <Columns>
                                <RadzenGridColumn TItem="SlideEvent" Property="Slide.Name" Title="Slide" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:d}" Property="StartTime.Date" Title="Date" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="StartTime" Title="Start Time" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="EndTime" Title="End Time" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="AverageSpeed" Title="Avg. Speed" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="VerticalSpeed" Title="Vert. Speed" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:0.00} Sec." Property="SlideDuration" Title="Duration" />
                                <RadzenGridColumn TItem="SlideEvent" Property="Rank" Title="Rank" />
                            </Columns>
                        </RadzenGrid>
                    </div>

                </TabPanel>
                <TabPanel Name="SlideMetrics">
                    <RadzenCard>
                        <div class="row">
                            <h2 class="text-center">@Range.ToString().Replace("_", " ")</h2>
                            @if (FilteredSlideName == null)
                            {
                                <h3 class="text-center">Metrics for all slides</h3>

                            }
                            else
                            {
                                <h3 class="text-center">Metrics for the @FilteredSlideName slide</h3>

                            }
                            @if (ResetFilter == true)
                            {
                                <Button Clicked="@OnResetFilter" Color="Color.Warning">
                                    <Icon Name="IconName.Clear"></Icon>
                                    Clear Filter
                                </Button>
                            }
                            else
                            {
                                <RadzenDropDown TValue="Slide" Style="width:100%"
                                                Placeholder="All"
                                                Data="@RangedEventListFiltered.Select(x => x.Slide).Distinct()"
                                                TextProperty="Name"
                                                Change=@(args => OnSlideFilterChange((args as Slide).Name)) />
                            }
                        </div>
                        <br />
                        <div class="row" style="margin-top:10%; margin-bottom:2%">
                            <div class="col text-center">
                                <h6>Average:</h6>
                            </div>
                            <div class="col text-center">
                                <h6>Best:</h6>
                            </div>
                            <div class="col text-center">
                                <h6>Worst:</h6>
                            </div>
                        </div>
                        <div>
                            <div class="row">
                                <div class="col text-center" style="margin-top:-9px;">
                                    <h5>@AverageTime.ToString("#.##") <i>Sec.</i></h5>
                                </div>
                                <div class="col text-center" style="margin-top:-9px;">
                                    <h5>@BestTime.ToString("#.##") <i>Sec.</i></h5>
                                </div>
                                <div class="col text-center" style="margin-top:-9px;">
                                    <h5>@WorstTime.ToString("#.##") <i>Sec.</i></h5>
                                </div>
                            </div>
                            <div class="row" style="margin-top:10%">
                                <div class="col text-center">
                                    <h6>Total Runs:</h6>
                                </div>
                                <div class="col text-center">
                                    <h6>Rank:</h6>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col text-center">
                                    @if (TotalSlideTaken != 0)
                                    {<h4>@TotalSlideTaken</h4> }
                                else
                                {
                                    <h4>@RangedEventList.Where(x => x.SlideId == FilteredSlideId).Count()</h4>
                                }
                                </div>
                                <div class="col text-center">
                                    @*<h4>Runs:</h4>
                                        <h4>Speed:</h4>*@
                                    <h4>@DurationRank.ToString().Replace("0", "N/A")</h4>
                                </div>
                            </div>

                        </div>
                    </RadzenCard>
                </TabPanel>
                <TabPanel Name="messages">
                    Content for messages.
                </TabPanel>
                <TabPanel Name="settings">
                    Content for settings.
                </TabPanel>
            </Content>
        </Tabs>

    </div>
}

@code {
    public string selectedTab = "Events";
    public string Email { get; set; }
    public double AverageTime
    {
        get
        {
            if (RangedEventListFiltered == null || RangedEventListFiltered.Count() == 0)
            {
                return 0;
            }
            return RangedEventListFiltered.Average(x => x.SlideDuration);
        }
    }
    public double BestTime
    {
        get
        {
            if (RangedEventListFiltered == null || RangedEventListFiltered.Count() == 0)
            {
                return 0;
            }
            return RangedEventListFiltered.Min(x => x.SlideDuration);
        }
    }
    public double WorstTime
    {
        get
        {
            if (RangedEventListFiltered == null || RangedEventListFiltered.Count() == 0)
            {
                return 0;
            }
            return RangedEventListFiltered.Max(x => x.SlideDuration);
        }
    }
    public bool ResetFilter = false;
    public bool ComparingStats = false;
    public int DurationRank
    {
        get
        {
            if (RangedEventListFiltered == null || RangedEventListFiltered.Count() == 0)
            {
                return 0;
            }
            return RangedEventListFiltered.Select(x => x.Rank).Min();
        }
        set
        {
        }
    }
    public int FilteredSlideId { get; set; }
    public string FilteredSlideName { get; set; }
    public double TotalSlideTaken
    {
        get
        {
            if (RangedEventListFiltered == null || RangedEventListFiltered.Count() == 0)
            {
                return 0;
            }
            return RangedEventListFiltered.Select(x => x.SlideId).Count();
        }
    }
    private Modal modalRef;
    IEnumerable<SlideEvent> EventsList;
    IEnumerable<SlideEvent> RangedEventList;
    IEnumerable<SlideEvent> RangedEventListFiltered;
    IEnumerable<SlideEvent> EventsListCurrentUser;
    IEnumerable<SlideEvent> EventsListComparedUser;
    public string ComparedUser { get; set; }
    public DateTime StartRange { get; set; } = DateTime.Now.Date;
    public DateTime EndRange { get; set; } = DateTime.Now.AddDays(1).Date;
    public DateRange Range { get; set; } = DateRange.Today;
    public static IEnumerable<DateRange> DateRanges { get; set; } = Enum.GetValues(typeof(DateRange)).Cast<DateRange>();

    protected override async Task OnInitializedAsync()
    {
        SetRange(Range);
    }

    private async void SetRange(DateRange range)
    {
        Range = range;
        if (range == DateRange.Today)
        {
            StartRange = DateTime.Now.Date;
            EndRange = DateTime.Now.AddDays(1).Date;
            int value = DateTime.Compare(StartRange, EndRange);
        }
        else if (range == DateRange.Week)
        {
            StartRange = DateTime.Today.AddDays(
      (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
      (int)DateTime.Today.DayOfWeek);
            EndRange = DateTime.Now.AddDays(8).Date;
        }
        else if (range == DateRange.Month)
        {
            StartRange = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            EndRange = StartRange.AddMonths(1).AddDays(-1);
        }
        else if (range == DateRange.Year)
        {
            StartRange = new DateTime(DateTime.Now.Year, 1, 1);
            EndRange = StartRange.AddYears(1).AddDays(-1);
        }
        else if (range == DateRange.All)
        {
            StartRange = DateTime.Now.AddYears(-10);
            EndRange = DateTime.Now.AddDays(1).Date;
        }


        Email = httpContextAccessor.HttpContext.User.Identity.Name.ToString();
        EventsList = hyperSloopService.GetUserSlideEvents().ToList();
        EventsListCurrentUser = await appservice._HyperSloopService.GetSlideEventsDataByUserId(Email);
        RangedEventList = EventsListCurrentUser.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).ToList();
        var i = 1;
        var rankedList = EventsList.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).OrderBy(x => x.SlideDuration).ToList();
        if (FilteredSlideName != null)
        {
            rankedList = rankedList.Where(x => x.Slide.Name == FilteredSlideName).ToList();
        }
        rankedList.ForEach(x => { x.Rank = i; i++; });
        OnSlideFilterChange(FilteredSlideName);
        EventsListComparedUser = await appservice._HyperSloopService.GetComparedUserEventsByName(ComparedUser);
        Email = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Email.ToLower()).ToString().Replace("@Bngholdingsinc.Com", "").Replace(".", " ");


    }

    void OnSlideFilterChange(string currentSlideName)
    {
        if (currentSlideName == null)
        {
            RangedEventListFiltered = RangedEventList.ToList();
        }
        else
        {
            RangedEventListFiltered = RangedEventList.Where(x => x.Slide.Name == currentSlideName);
            InvokeAsync(StateHasChanged);

        }
        ResetFilter = currentSlideName != null;
        FilteredSlideName = currentSlideName;
        InvokeAsync(StateHasChanged);

    }

    void OnCompareStatsChange(object args)
    {
        ComparedUser = args.ToString();
    }

    void OnResetFilter()
    {
        RangedEventListFiltered = RangedEventList.ToList();
        var i = 1;
        ResetFilter = false;
        FilteredSlideName = null;
        RangedEventList.ToList().ForEach(x => { x.Rank = i; i++; });
        InvokeAsync(StateHasChanged);
    }

    private void ShowCompareModal()
    {
        modalRef.Show();
    }

    private void CloseModal()
    {
        modalRef.Hide();
        ComparedUser = null;
        ComparingStats = false;
        navigationManager.NavigateTo("/personalStats", forceLoad: true);
    }

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }

    public void CompareStats(string comparedUser)
    {
        ComparedUser = comparedUser;
        ComparingStats = true;
        navigationManager.NavigateTo($"/comparedStats/{comparedUser}");
        EventsListComparedUser = EventsList.Where(x => x.User.Name == comparedUser).ToList();
    }

    void CellRender(CellRenderEventArgs<SlideEvent> args)
    {
        args.Attributes.Add("style", $"width: 50% !important");
    }

    public enum DateRange
    {
        Today,
        Week,
        Month,
        Year,
        All,
    }
    }
