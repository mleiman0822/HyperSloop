@page "/personalStats"
@using Radzen
@using Radzen.Blazor
@using System.Net
@using System.Net.Sockets
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@using Microsoft.AspNetCore.Http
@using System.Globalization;
@using Blazorise.Icons.FontAwesome;

@inject HyperSloopService hyperSloopService
@inject IHttpContextAccessor httpContextAccessor
@inject AppService appservice


<h3></h3>

@if (EventsList == null)
{
    <p class="text-center"><em>Loading Leaderboard data</em></p>
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <h3 class="text-center">Personal Metrics for <b>@Email</b></h3>

    @foreach (var range in DateRanges)
    {

        <div class="p-1 float-start">
            <Button Active="true" Color="@(Range == range ? Color.Primary : Color.Dark)"
                    Clicked="@(args => SetRange(range))">
                @range.ToString().Replace("_", " ")
            </Button>
        </div>
    }

<div class="upper">
    <div class="bestTime">
        <h6>Best Time @Range.ToString().Replace("_", " "):</h6>
        <h4>@BestTime Sec.</h4>
    </div>
    <div>
        <h6>Slide 1:</h6>
        <h4 class="text-center">@EventsList.Where(x => x.SlideId == 1).Count()</h4>
    </div>
    <div>
        <h6>Slide 2:</h6>
        <h4 class="text-center">@EventsList.Where(x => x.SlideId == 2).Count()</h4>
    </div>
    <div>
        <h6>Slide 3:</h6>
        <h4 class="text-center">@EventsList.Where(x => x.SlideId == 3).Count()</h4>
    </div>
</div>
    <div style="clear:both; margin-right: 5px">
        <RadzenDataGrid TItem="SlideEvent" Data="@RangedEventList"
                        AllowColumnResize="true" AllowFiltering="true"
                        FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        PageSize="20" AllowSorting="true" AllowPaging="true">
            <Columns>
                <RadzenDataGridColumn TItem="SlideEvent" Property="SlideId" Title="Slide" Width="75px" />
                <RadzenDataGridColumn SortOrder="SortOrder.Descending" TItem="SlideEvent" FormatString="{0:d}" Property="StartTime.Date" Title="Date" Width="75px" />
                <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="StartTime" Title="Start Time" Width="100px" />
                <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="EndTime" Title="End Time" Width="100px" />
                <RadzenDataGridColumn TItem="SlideEvent" Property="SlideDuration" Title="Duration (In Sec.)" Width="100px" />
                <RadzenDataGridColumn TItem="SlideEvent" Property="AverageSpeed" Title="Avg. Speed" Width="75px">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SlideEvent" Property="VertcialSpeed" Title="Vert. Speed" Width="75px" />
            </Columns>
        </RadzenDataGrid>
    </div>

}



@code {
    public string Email { get; set; }
    public double BestTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Min(x => x.SlideDuration);
        }
    }

    IEnumerable<SlideEvent> EventsList;
    IEnumerable<SlideEvent> RangedEventList;
    public DateTime StartRange { get; set; } = DateTime.Now.Date;
    public DateTime EndRange { get; set; } = DateTime.Now.AddDays(1).Date;
    public DateRange Range { get; set; } = DateRange.Today;
    public static IEnumerable<DateRange> DateRanges { get; set; } = Enum.GetValues(typeof(DateRange)).Cast<DateRange>();

    protected override async Task OnInitializedAsync()
    {
        SetRange(Range);
    }

    private async void SetRange(DateRange range)
    {
        Range = range;
        if (range == DateRange.Today)
        {
            StartRange = DateTime.Now.Date;
            EndRange = DateTime.Now.AddDays(1).Date;
            int value = DateTime.Compare(StartRange, EndRange);

        }
        else if (range == DateRange.Week)
        {
            StartRange = DateTime.Today.AddDays(
      (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
      (int)DateTime.Today.DayOfWeek);
            EndRange = DateTime.Now.AddDays(8).Date;
        }
        else if (range == DateRange.Month)
        {
            StartRange = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            EndRange = StartRange.AddMonths(1).AddDays(-1);
        }
        else if (range == DateRange.Year)
        {
            StartRange = new DateTime(DateTime.Now.Year, 1, 1);
            EndRange = StartRange.AddYears(1).AddDays(-1);
        }
        else if (range == DateRange.All_Time)
        {
            StartRange = DateTime.Now.AddYears(-10);
            EndRange = DateTime.Now.AddDays(1).Date;
        }
        Email = httpContextAccessor.HttpContext.User.Identity.Name.ToString();
        EventsList = await appservice._HyperSloopService.GetSlideEventsDataByUserId(Email);
        RangedEventList = EventsList.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).ToList();
        Email = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Email.ToLower()).ToString().Replace("@Bngholdingsinc.Com", "").Replace(".", " ");
    }

    public enum DateRange
    {
        Today,
        Week,
        Month,
        Year,
        All_Time
    }
}
