@page "/personalStats"
@using Radzen
@using Radzen.Blazor
@using Blazorise
@using Blazorise.Components
@using System.Net
@using System.Net.Sockets
@using System.Linq.Expressions
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@using Microsoft.AspNetCore.Http
@using System.Globalization;
@using System.ComponentModel

@inject HyperSloopService hyperSloopService
@inject IHttpContextAccessor httpContextAccessor
@inject AppService appservice
@inject NavigationManager navigationManager


<h3></h3>

@if (EventsList == null)
{
    <p class="text-center"><em>Loading Leaderboard data</em></p>
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <h3 class="text-center">Personal Stats for <b>@Email</b></h3>
    <br />

    @foreach (var range in DateRanges)
    {

<div class="float-start">
    <Button Active="true" Color="@(Range == range ? Color.Primary : Color.Dark)"
            Clicked="@(args => SetRange(range))">
        @range.ToString().Replace("_", " ")
    </Button>
    <div class="divder"/>
</div>
    }
    <br />

    <Modal @ref="modalRef" Closed="@CloseModal">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Compare Stats</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                @if (ComparedUser == null)
                {
                    <RadzenDropDown TValue="string" Style="width: 100%;"
                                    Placeholder="Select HyperSloop User"
                                    AllowFiltering="true"
                                    Data="@EventsList.Select(x => x.User.Name).Distinct()"
                                    Change="@(args => OnCompareStatsChange(args))"
                                    Value="@ComparedUser" />
                }
                else
                {
                    <h3 class="text-center">Comparing stats with <b>@ComparedUser</b></h3>
                    <h4 class="text-center"></h4>
                    <br />
                    <div class="text-center">
                        <Button Style="justify-content:center; text-align:center" Color="Color.Danger" Clicked="@(args => CompareStats(ComparedUser))">Compare</Button>
                        <Button Color="Color.Secondary" Clicked="@CloseModal">Cancel</Button>

                    </div>
                }
            </ModalBody>
        </ModalContent>
    </Modal>
    <div class="float-start w-100">
        <Tabs  Style="margin-top:5%" Justified="true" SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
            <Items>
                <Tab Name="Events">Events</Tab>
                <Tab Name="SlideMetrics">Metrics</Tab>
                <Tab Name="CompareStats" Clicked="@ShowCompareModal">
                    <RadzenIcon Style="vertical-align:inherit" Icon="compare_arrows" />
                </Tab>
            </Items>
            <Content>
                <TabPanel Name="Events">
                    <div style="clear:both; margin-right: 5px">
                        <div style="display:flex; padding-bottom:8px">
                            @if (ResetFilter == true)
                            {
                                <Button Class="w-100" Clicked="@OnResetFilter" Color="Color.Warning">
                                    <Icon Name="IconName.Clear"></Icon>
                                    Clear
                                </Button>
                            }
                            else
                            {
                                <RadzenDropDown TValue="int" Style="width:100%"
                                                Placeholder="Filter by slide..."
                                                Data="@RangedEventList.Select(x => x.SlideId).Distinct()"
                                                Change=@(args => OnSlideFilterChange(args)) />
                            }

                        </div>
                        <RadzenGrid TItem="SlideEvent" Data="@RangedEventList"
                                        AllowColumnResize="true" AllowFiltering="true"
                                        FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        PageSize="20" AllowSorting="true" AllowPaging="true">
                            <Columns>
                                <RadzenGridColumn TItem="SlideEvent" Property="SlideId" Title="Slide" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:d}" Property="StartTime.Date" Title="Date"  />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="StartTime" Title="Start Time" />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="EndTime" Title="End Time"  />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:0.00} Sec." Property="SlideDuration" Title="Duration"  />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="AverageSpeed" Title="Avg. Speed"  />
                                <RadzenGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="VerticalSpeed" Title="Vert. Speed" />
                                <RadzenGridColumn TItem="SlideEvent" Property="Rank" Title="Rank"/>
                            </Columns>
                        </RadzenGrid>
                    </div>

                </TabPanel>
                <TabPanel Name="SlideMetrics">
                    <RadzenCard>
                        <div class="row">
                            <h2 class="text-center">@Range.ToString().Replace("_", " ")</h2>
                            <h3>Slide @FilteredSlideId</h3>
                            @if (ResetFilter == true)
                            {
                                <Button Clicked="@OnResetFilter" Color="Color.Warning">
                                    <Icon Name="IconName.Clear"></Icon>
                                    Clear Filter
                                </Button>
                            }
                            else
                            {
                                <RadzenDropDown TValue="int" Style="width:100%"
                                                Placeholder="All"
                                                Data="@RangedEventList.Select(x => x.SlideId).Distinct()"
                                                TextProperty="SlideName" ValueProperty="SlideId"
                                                Change=@(args => OnSlideFilterChange(args)) />
                            }
                        </div>
                        <br />
                        <div class="row" style="margin-top:10%; margin-bottom:2%">
                            <div class="col">
                                <h6>Average Time:</h6>
                            </div>
                            <div class="col">
                                <h6>Best Time:</h6>
                            </div>
                            <div class="col">
                                <h6>Worst Time:</h6>
                            </div>
                        </div>
                        <div>
                            <div class="row">
                                <div class="col">
                                    <h4>@AverageTime.ToString("#.##") Sec.</h4>
                                </div>
                                <div class="col">
                                    <h4>@BestTime.ToString("#.##") Sec.</h4>
                                </div>
                                <div class="col">
                                    <h4>@WorstTime.ToString("#.##") Sec.</h4>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col text-center">
                                    <h6>Total Slide Runs:</h6>
                                </div>
                                <div class="col text-center">
                                    <h6>Where You Rank:</h6>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col text-center">
                                    @if (TotalSlideTaken != 0)
                                    {<h4>@TotalSlideTaken</h4> }
                                else
                                {
                                    <h4>@RangedEventList.Where(x => x.SlideId == FilteredSlideId).Count()</h4>
                                }
                                </div>
                                <div class="col text-center">
                                    @*<h4>Runs:</h4>
                    <h4>Speed:</h4>*@
                                    <h4>Duration: @DurationRank</h4>
                                </div>
                            </div>

                        </div>
                    </RadzenCard>
                </TabPanel>
                <TabPanel Name="messages">
                    Content for messages.
                </TabPanel>
                <TabPanel Name="settings">
                    Content for settings.
                </TabPanel>
            </Content>
        </Tabs>

    </div>
}

@code {
    public string selectedTab = "Events";
    public string Email { get; set; }
    public double AverageTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Average(x => x.SlideDuration);
        }
    }
    public double BestTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Min(x => x.SlideDuration);
        }
    }
    public double WorstTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Max(x => x.SlideDuration);
        }
    }
    public bool ResetFilter = false;
    public bool ComparingStats = false;
    public int DurationRank
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Select(x => x.Rank).Min();
        }
        set
        {
        }
    }
    public int FilteredSlideId { get; set; }
    public double TotalSlideTaken
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Select(x => x.SlideId).Count();
        }
    }
    private Modal modalRef;
    IEnumerable<SlideEvent> EventsList;
    IEnumerable<SlideEvent> RangedEventList;
    IEnumerable<SlideEvent> EventsListCurrentUser;
    IEnumerable<SlideEvent> EventsListComparedUser;
    public string ComparedUser { get; set; }
    public DateTime StartRange { get; set; } = DateTime.Now.Date;
    public DateTime EndRange { get; set; } = DateTime.Now.AddDays(1).Date;
    public DateRange Range { get; set; } = DateRange.Today;
    public static IEnumerable<DateRange> DateRanges { get; set; } = Enum.GetValues(typeof(DateRange)).Cast<DateRange>();

    protected override async Task OnInitializedAsync()
    {
        SetRange(Range);
    }

    private async void SetRange(DateRange range)
    {
        Range = range;
        if (range == DateRange.Today)
        {
            StartRange = DateTime.Now.Date;
            EndRange = DateTime.Now.AddDays(1).Date;
            int value = DateTime.Compare(StartRange, EndRange);
        }
        else if (range == DateRange.Week)
        {
            StartRange = DateTime.Today.AddDays(
      (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
      (int)DateTime.Today.DayOfWeek);
            EndRange = DateTime.Now.AddDays(8).Date;
        }
        else if (range == DateRange.Month)
        {
            StartRange = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            EndRange = StartRange.AddMonths(1).AddDays(-1);
        }
        else if (range == DateRange.Year)
        {
            StartRange = new DateTime(DateTime.Now.Year, 1, 1);
            EndRange = StartRange.AddYears(1).AddDays(-1);
        }
        else if (range == DateRange.All)
        {
            StartRange = DateTime.Now.AddYears(-10);
            EndRange = DateTime.Now.AddDays(1).Date;
        }


        Email = httpContextAccessor.HttpContext.User.Identity.Name.ToString();
        EventsList = hyperSloopService.GetUserSlideEvents().ToList();
        EventsListCurrentUser = await appservice._HyperSloopService.GetSlideEventsDataByUserId(Email);
        if (FilteredSlideId == 0)
        {
            var i = 1;
            RangedEventList = EventsListCurrentUser.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).OrderBy(x => x.SlideDuration).ToList();
            RangedEventList.ToList().ForEach(x => { x.Rank = i; i++; });

        }
        else
        {
            var i = 1;
            RangedEventList = EventsListCurrentUser.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).OrderBy(x => x.SlideDuration).Where(x => x.SlideId == FilteredSlideId).ToList();
            RangedEventList.Where(x => x.SlideId == FilteredSlideId).ToList().ForEach(x => { x.Rank = i; i++; });
            DurationRank = RangedEventList.Where(x => x.SlideId == FilteredSlideId).ToList().Select(x => x.Rank).Min();

        }
        EventsListComparedUser = await appservice._HyperSloopService.GetComparedUserEventsByName(ComparedUser);
        Email = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Email.ToLower()).ToString().Replace("@Bngholdingsinc.Com", "").Replace(".", " ");
        //EventsListCurrentUser.ToList().ForEach(x => { x.Rank = i; i++; });
        //i = 1;
        //EventsList.ToList().ForEach(x => { x.Rank = i; i++; });
        //i = 1;

    }

    public int OnSlideFilterChange(object args)
    {
        RangedEventList = RangedEventList.Where(x => x.SlideId == Convert.ToInt32(args));
        ResetFilter = true;
        FilteredSlideId = Convert.ToInt32(args);
        return FilteredSlideId;
    }
    void OnCompareStatsChange(object args)
    {
        ComparedUser = args.ToString();
    }

    void OnResetFilter()
    {
        RangedEventList = EventsListCurrentUser.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).ToList();
        var i = 1;
        ResetFilter = false;
        FilteredSlideId = 0;
        RangedEventList.ToList().ForEach(x => { x.Rank = i; i++; });
        InvokeAsync(StateHasChanged);
    }

    private void ShowCompareModal()
    {
        modalRef.Show();
    }

    private void CloseModal()
    {
        modalRef.Hide();
        ComparedUser = null;
        ComparingStats = false;
        navigationManager.NavigateTo("/personalStats", forceLoad: true);
    }

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }

    public void CompareStats(string comparedUser)
    {
        ComparedUser = comparedUser;
        ComparingStats = true;
        navigationManager.NavigateTo($"/comparedStats/{comparedUser}");
        EventsListComparedUser = EventsList.Where(x => x.User.Name == comparedUser).ToList();
    }

    public enum DateRange
    {
        Today,
        Week,
        Month,
        Year,
        All,
    }
}
