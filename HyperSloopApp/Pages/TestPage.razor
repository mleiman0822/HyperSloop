@page "/TestPage"
@using Radzen.Blazor
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@using System.Threading
@inject IJSRuntime JsRuntime
@inject DialogService dialogService
@inject ApplicationDbContext appDbcontext
@inject HyperSloopService hyperSloopService
@inject SlideUploadService slideUploadService

<h3>Test Page</h3>
<br />
<br />

<div>
    @if (slideFloors["start"] == "")
    {
        <h2>Which Slide Are You Taking?</h2>
        <RadzenDropDown AllowClear="true" TValue="int" Style="width:300px"
                        Data="@(slide.Select(s => s.SlideId).Distinct())"
                        ValueProperty="SlideId"
                        Change="@(args => OnChange(args, "start"))"
                         />
    }
    else
    {
        <h2>You are starting at slide @slideFloors["start"]</h2>

    }
    @if (slideFloors["start"] != "")

    {
        @if (slideFloors["end"] == "")
        {
            <h2>Which Floor Are You Going To?</h2>
            <RadzenDropDown AllowClear="true" TValue="int" Style="width:300px"
                            Data="@(slide.Select(s => s.SlideId).Distinct())"
                            ValueProperty="SlideId"
                            Change="@(args => OnChange(args, "end"))" />
        }
        else
        {
            <h2>You are going to floor @slideFloors["end"]</h2>
            <RadzenButton Click="@ClearSlideSelection" ButtonStyle="ButtonStyle.Danger">Clear Selection</RadzenButton>
            <RadzenButton ButtonStyle="ButtonStyle.Secondary">Confirm Selection?</RadzenButton>
        }

    }
</div>
<br />
<br />
<br />
<br />

<div>
    <RadzenButton Click="@StartResult" ButtonStyle="ButtonStyle.Info">Start</RadzenButton>
    <RadzenButton Click="@EndResultAndCaptureData" ButtonStyle="ButtonStyle.Danger">Stop</RadzenButton>
    <RadzenButton Click="@ClearTime" ButtonStyle="ButtonStyle.Light">Clear Time</RadzenButton>

</div>
<div>
    @if (startTime == DateTime.MinValue)
    {
        <h2>Press Start</h2>
    }
    else
    {
        <h2>@startTime.ToString()</h2>
    }
    @if (endTime == DateTime.MinValue)
    {
        <h2></h2>
    }
    else
    {
        @if (startTime == DateTime.MinValue)
        {
            <h2></h2>
        }
        else
        {
            <h2>@endTime.ToString()</h2>
        }
    }

</div>
<br />
<br />
<h4>Total Time in Seconds:</h4>
@if (startTime == DateTime.MinValue)
{
    <h2>00:00:00</h2>
}
else
{
    <h2>@result.ToString("mm':'ss':'fff")</h2>
}

@code {

    public DateTime startTime;
    public DateTime endTime;
    public TimeSpan result;
    public string Email;
    public Dictionary<string, string> slideFloors = new Dictionary<string, string> { { "start", "" }, { "end", "" } };
    public List<Slide> slide = new List<Slide>();
    Events obj = new Events();


    protected override void OnInitialized()
    {
        slide = appDbcontext.Slides.ToList();
    }

    async void OnChange(object value, string selectedFloor)
    {
        slideFloors[selectedFloor] = value.ToString();
        if (slideFloors["start"] == "2" && slideFloors["end"] == "3" ||
          slideFloors["start"] == "1" && slideFloors["end"] == "2" ||
          slideFloors["start"] == "1" && slideFloors["end"] == "3")
        {
            ClearSlideSelection();
            await JsRuntime.InvokeVoidAsync("alert",
                "You cannot choose an ending floor above selected floor. Please select again");
        }
        else if (slideFloors["start"] == slideFloors["end"])
        {
            await JsRuntime.InvokeVoidAsync("alert",
            "You have selected the same floors, please select again.");
        }
        else
        {
            //ConfirmSlideSelection();
        }
    }

    protected async void ConfirmSlideSelection(int SlideId, string email)
    {
        slideUploadService.SetUser(SlideId, email);
    }

    public void ClearSlideSelection()
    {
        slideFloors["end"] = "";
        slideFloors["start"] = "";
    }

    public void StartResult()
    {
        startTime = DateTime.Now;
    }

    public async void EndResultAndCaptureData()
    {
        if (startTime == DateTime.MinValue)
        {
            endTime = DateTime.MinValue;
            await JsRuntime.InvokeVoidAsync("alert", "Warning! No end time recognized, please start timer to capture data.");

        }
        else
        {
            endTime = DateTime.Now;
            result = endTime.Subtract(startTime);
        }
    }

    public void ClearTime()
    {
        startTime = DateTime.MinValue;
        endTime = DateTime.MinValue;
        result = TimeSpan.Zero;
    }



}
