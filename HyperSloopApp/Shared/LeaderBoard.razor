@page "/leaderBoard"
@using HyperSloopApp.Models
@using HyperSloopApp.Data
@using Radzen;
@using System.Globalization;
@using Blazorise;
@using Blazorise.Components;
@inject HyperSloopService hyperSloopService

<h3></h3>

@if (EventsList == null)
{
    <p class="text-center"><em>Loading Leaderboard data</em></p>
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{

    <h3 class="text-center">Global Leaderboard</h3>
    <br/>

    @foreach (var range in DateRanges)
    {
        <div class="p-1 float-start">
            <Button Active="true" Color="@(Range == range ? Color.Primary : Color.Dark)"
                    Clicked="@(args => SetRange(range))">
                @range.ToString().Replace("_", " ")
            </Button>
        </div>
    }

<div class="upper">
    <div>
        <h6>Avg. Time @Range.ToString().Replace("_", " "):</h6>
        <h4>@AverageTime.ToString("#.##") Sec.</h4>
    </div>
    <div>
        <h6>Worst Time @Range.ToString().Replace("_", " "):</h6>
        <h4>@WorstTime.ToString("#.##")  Sec.</h4>
    </div>
    <div>
        <h6>Best Time @Range.ToString().Replace("_", " "):</h6>
        <h4>@BestTime.ToString("#.##")  Sec.</h4>
    </div>
    <div>
        <h6>Slide 1:</h6>
        <h4 class="text-center">@EventsList.Where(x => x.Slide.SlideId == 1).Count()</h4>
    </div>
    <div>
        <h6>Slide 2:</h6>
        <h4 class="text-center">@EventsList.Where(x => x.Slide.SlideId == 2).Count()</h4>
    </div>
    <div>
        <h6>Slide 3:</h6>
        <h4 class="text-center">@EventsList.Where(x => x.Slide.SlideId == 3).Count()</h4>
    </div>
    <div>
        <h6>All:</h6>
        <h4 class="text-center">@EventsList.Select(x => x.SlideEventId).Count()</h4>
    </div>
</div>
<div style="clear:both">
    <div style="display:flex; padding-bottom:8px">
        <RadzenDropDown TValue="int" Style="width:100%"
                        Placeholder="Filter by slide..."
                        Data="@RangedEventList.Select(x => x.Slide.SlideId).Distinct()"
                        Change=@(args => OnChange(args))
                        />        
        <Button Clicked="@OnResetFilter" Color="Color.Warning">
            <Icon Name="IconName.ArrowAltCircleDown"></Icon>
        </Button>
    </div>
    <RadzenDataGrid TItem="SlideEvent" Data="@RangedEventList"
                    AllowColumnResize="true" AllowFiltering="true"
                    FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    PageSize="20" AllowSorting="true" AllowPaging="true">
        <Columns>
            <RadzenDataGridColumn TItem="SlideEvent" Property="User.Name" Title="Participant" Width="100px" />
            <RadzenDataGridColumn TItem="SlideEvent" Property="Slide.SlideId" Title="Slide" Width="100px" />
            <RadzenDataGridColumn SortOrder="SortOrder.Descending" TItem="SlideEvent" FormatString="{0:d}" Property="StartTime.Date" Title="Date" Width="100px" />
            <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="StartTime" Title="Start Time" Width="100px" />
            <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:T}" Property="EndTime" Title="End Time" Width="100px" />
            <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} Sec." Property="SlideDuration" Title="Duration" Width="100px" />
            <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="AverageSpeed" Title="Avg. Speed" Width="85px" />
            <RadzenDataGridColumn TItem="SlideEvent" FormatString="{0:0.00} MPH" Property="VerticalSpeed" Title="Vert. Speed" Width="85px" />
        </Columns>
    </RadzenDataGrid>
</div>

}

@code {
    public double AverageTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Average(x => x.SlideDuration);
        }
    }
    public double BestTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Min(x => x.SlideDuration);
        }
    }
    public double WorstTime
    {
        get
        {
            if (RangedEventList == null || RangedEventList.Count() == 0)
            {
                return 0;
            }
            return RangedEventList.Max(x => x.SlideDuration);
        }
    }
    IEnumerable<SlideEvent> EventsList;
    IEnumerable<SlideEvent> RangedEventList;
    public DateTime StartRange { get; set; } = DateTime.Now.Date;
    public DateTime EndRange { get; set; } = DateTime.Now.AddDays(1).Date;
    public DateRange Range { get; set; } = DateRange.Today;
    public static IEnumerable<DateRange> DateRanges { get; set; } = Enum.GetValues(typeof(DateRange)).Cast<DateRange>();


    protected override async Task OnInitializedAsync()
    {
        SetRange(Range);
    }

    public async Task SetRange(DateRange range)
    {
        if (range == DateRange.Today)
        {
            StartRange = DateTime.Now.Date;
            EndRange = DateTime.Now.AddDays(1).Date;
        }
        else if (range == DateRange.Week)
        {
            StartRange = DateTime.Today.AddDays(
      (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek -
      (int)DateTime.Today.DayOfWeek);
            EndRange = DateTime.Now.AddDays(8).Date;
        }
        else if (range == DateRange.Month)
        {
            StartRange = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
            EndRange = StartRange.AddMonths(1).AddDays(-1);
        }
        else if (range == DateRange.Year)
        {
            StartRange = new DateTime(DateTime.Now.Year, 1, 1);
            EndRange = StartRange.AddYears(1).AddDays(-1);
        }
        else if (range == DateRange.All_Time)
        {
            StartRange = DateTime.Now.AddYears(-10);
            EndRange = DateTime.Now.AddDays(1).Date;
        }

        Range = range;
        EventsList = hyperSloopService.GetUserSlideEvents().ToList();
        RangedEventList = EventsList.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).ToList();
    }

    void OnChange(object args)
    {
        RangedEventList = RangedEventList.Where(x => x.Slide.SlideId == Convert.ToInt32(args));
    }

    void OnResetFilter()
    {
        RangedEventList = EventsList.Where(x => x.StartTime >= StartRange && x.EndTime < EndRange).ToList();
        InvokeAsync(StateHasChanged);
    }



    public enum DateRange
    {
        Today,
        Week,
        Month,
        Year,
        All_Time
    }

}
